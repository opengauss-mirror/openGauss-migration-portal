#!/bin/bash

# Copyright (c) Huawei Technologies Co., Ltd. 2025-2025. All rights reserved.
# Description: Migration Task Management Script

set -euo pipefail

usage() {
    cat <<EOF
Migration Task Management Script

Usage:
  Basic Usage:
    $0 list                                 List all migration tasks
    $0 create <task_id> <source_db_type>    Create a new migration task
    $0 delete <task_id>                     Delete a migration task
    $0 -h|--help                            Show this help message

  Supported Source DB Types:
    mysql/MySQL
    postgresql/PostgreSQL

  Examples:
    $0 list
    $0 create 1 mysql
    $0 create 2 PostgreSQL
    $0 delete 1

Tips:
  1. Requires Java 11 or later to be installed.
  2. Task ID must be unique.
  3. Source database type must be one of the supported types.
EOF
    exit 1
}

# Function to check if task exists
task_exists() {
    local task_id=$1
    local task_dir="$PROJECT_ROOT/workspace/task_$task_id"
    [[ -d "$task_dir" ]]
}

# Check if the first argument is provided
if [ $# -eq 0 ]; then
    usage
fi

# Check for help argument
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    usage
fi

# Function to check Java version
check_java_version() {
    local java_version
    local version_num

    if ! java_version=$(java -version 2>&1 | awk -F '"' '/version/ {print $2}'); then
        echo "Error: Java is not installed or not in PATH"
        return 1
    fi

    if [[ "$java_version" =~ ^1\. ]]; then
        version_num=$(echo "$java_version" | cut -d. -f2)
    else
        version_num=$(echo "$java_version" | cut -d. -f1)
    fi

    if [ "$version_num" -lt 11 ]; then
        echo "Error: Java 11 or later is required (found Java $java_version)"
        return 1
    fi
    return 0
}

# Verify Java is available and version >= 11
if ! check_java_version; then
    exit 1
fi

# Change to project root
SCRIPT_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd)
PROJECT_ROOT=$(dirname "$SCRIPT_DIR")
cd "$PROJECT_ROOT" || {
    echo "Error: Failed to change to project directory"
    exit 1
}

# Ensure workspace directory exists
mkdir -p "$PROJECT_ROOT/workspace"

OPERATION="$1"
shift

# Validate operation and arguments
case "$OPERATION" in
    list)
        if [ $# -gt 0 ]; then
            echo "Error: 'list' operation does not require additional arguments"
            usage
        fi
        ;;
    create)
        if [ $# -lt 2 ]; then
            echo "Error: 'create' operation requires task_id and source_db_type"
            usage
        fi
        TASK_ID="$1"
        SOURCE_DB_TYPE="$2"

        # Check if task already exists
        if task_exists "$TASK_ID"; then
            echo "Error: Task $TASK_ID already exists in $PROJECT_ROOT/workspace/task_$TASK_ID"
            exit 1
        fi

        # Validate source_db_type
        case "$SOURCE_DB_TYPE" in
            mysql|MySQL|postgresql|PostgreSQL)
                ;;
            *)
                echo "Error: Invalid source_db_type '$SOURCE_DB_TYPE'. Supported types: mysql/MySQL/postgresql/PostgreSQL"
                usage
                ;;
        esac
        shift 2
        ;;
    delete)
        if [ $# -lt 1 ]; then
            echo "Error: 'delete' operation requires task_id"
            usage
        fi
        TASK_ID="$1"

        # Check if task exists
        if ! task_exists "$TASK_ID"; then
            echo "Error: Task $TASK_ID does not exist in $PROJECT_ROOT/workspace/task_$TASK_ID"
            exit 1
        fi
        shift
        ;;
    *)
        echo "Error: Invalid operation name '$OPERATION'"
        usage
        ;;
esac

if [ $# -gt 0 ]; then
    echo "Error: Too many arguments provided"
    usage
fi

# Build Java command arguments
ARGS=("--task" "$OPERATION")

case "$OPERATION" in
    create)
        ARGS+=("$TASK_ID" "$SOURCE_DB_TYPE")
        ;;
    delete)
        ARGS+=("$TASK_ID")
        ;;
esac

# Find the JAR file
JAVA_PROGRAM=$(ls openGauss-portal-*.jar 2> /dev/null | head -n 1)
if [[ -z "$JAVA_PROGRAM" ]]; then
    echo "Error: No openGauss-portal-*.jar file found in $PROJECT_ROOT"
    exit 1
fi

# Execute Java program
exec java -Dfile.encoding=UTF-8 -jar "$JAVA_PROGRAM" "${ARGS[@]}"